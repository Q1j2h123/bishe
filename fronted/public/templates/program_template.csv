题目标题,题目内容,函数名称,参数类型,返回值类型,测试用例输入,测试用例输出,Java代码模板,Python代码模板,C++代码模板,C代码模板,Java标准答案,Python标准答案,C++标准答案,C标准答案,时间限制(ms),内存限制(MB),难度,岗位类型,标签
两数之和,"给定一个整数数组和一个目标值，找出数组中和为目标值的两个数的索引。你可以假设每种输入只会对应一个答案，且同样的元素不能被重复利用。","twoSum","int[],int","int[]","[2,7,11,15],9###[3,2,4],6###[3,3],6","[0,1]###[1,2]###[0,1]","public int[] twoSum(int[] nums, int target) {\n    // 请在此实现两数之和算法\n    return new int[]{0, 0};\n}","def twoSum(nums, target):\n    # 请在此实现两数之和算法\n    return [0, 0]","#include <vector>\n#include <unordered_map>\n\nstd::vector<int> twoSum(std::vector<int>& nums, int target) {\n    // 请在此实现两数之和算法\n    return {0, 0};\n}","#include <stdlib.h>\n\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    // 请在此实现两数之和算法\n    int* result = (int*)malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    result[0] = 0;\n    result[1] = 0;\n    return result;\n}","#import java.util.HashMap;\nimport java.util.Map;\n\npublic int[] twoSum(int[] nums, int target) {\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if (map.containsKey(complement)) {\n            return new int[] { map.get(complement), i };\n        }\n        map.put(nums[i], i);\n    }\n    return new int[]{-1, -1};\n}","def twoSum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return [-1, -1]","std::vector<int> twoSum(std::vector<int>& nums, int target) {\n    std::unordered_map<int, int> num_map;\n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        if (num_map.find(complement) != num_map.end()) {\n            return {num_map[complement], i};\n        }\n        num_map[nums[i]] = i;\n    }\n    return {-1, -1};\n}","int* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    int* result = (int*)malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] + nums[j] == target) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n    return result;\n}",1000,128,EASY,ALGORITHM,"数组,哈希表"