题目标题,题目内容,函数名,参数类型,返回值类型,测试用例,Java代码模板,Python代码模板,C++代码模板,C代码模板,Java标准答案,Python标准答案,C++标准答案,C标准答案,时间限制,内存限制,难度,函数类型
最大公约数,"请实现一个函数，计算两个正整数的最大公约数。

最大公约数是能够被两个或多个整数整除的最大正整数。例如，8和12的最大公约数是4。

输入：两个正整数
输出：它们的最大公约数",gcd,int|int,int,"示例1:
输入: 12 8
输出: 4

示例2:
输入: 54 24
输出: 6

示例3:
输入: 13 7
输出: 1","class Solution {
    public int gcd(int a, int b) {
        // 请在此实现你的代码
        return 0;
    }
}","def gcd(a, b):
    # 请在此实现你的代码
    pass","int gcd(int a, int b) {
    // 请在此实现你的代码
    return 0;
}","int gcd(int a, int b) {
    // 请在此实现你的代码
    return 0;
}","class Solution {
    public int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}","def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)","int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}","int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}",1000,256,简单,数学

回文串判断,"请实现一个函数，判断给定的字符串是否为回文串。回文串指正着读和倒着读都一样的字符串。

注意：
1. 忽略所有非字母和数字的字符
2. 忽略大小写

输入：一个字符串
输出：如果是回文串，返回true；否则返回false",isPalindrome,char*,bool,"示例1:
输入: ""A man, a plan, a canal: Panama""
输出: true

示例2:
输入: ""race a car""
输出: false

示例3:
输入: """"
输出: true","class Solution {
    public boolean isPalindrome(String s) {
        // 请在此实现你的代码
        return false;
    }
}","def isPalindrome(s):
    # 请在此实现你的代码
    pass","bool isPalindrome(string s) {
    // 请在此实现你的代码
    return false;
}","bool isPalindrome(char* s) {
    // 请在此实现你的代码
    return false;
}","class Solution {
    public boolean isPalindrome(String s) {
        if (s == null || s.length() == 0) {
            return true;
        }
        
        s = s.toLowerCase();
        int left = 0;
        int right = s.length() - 1;
        
        while (left < right) {
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }
            
            if (left < right && s.charAt(left) != s.charAt(right)) {
                return false;
            }
            
            left++;
            right--;
        }
        
        return true;
    }
}","def isPalindrome(s):
    # 过滤非字母数字字符并转小写
    cleaned = ''.join(c.lower() for c in s if c.isalnum())
    
    # 判断是否回文
    return cleaned == cleaned[::-1]","bool isPalindrome(string s) {
    string cleaned = "";
    
    // 清理非字母数字字符并转小写
    for (char c : s) {
        if (isalnum(c)) {
            cleaned += tolower(c);
        }
    }
    
    // 判断是否回文
    int left = 0;
    int right = cleaned.length() - 1;
    while (left < right) {
        if (cleaned[left] != cleaned[right]) {
            return false;
        }
        left++;
        right--;
    }
    
    return true;
}","bool isPalindrome(char* s) {
    int len = strlen(s);
    char cleaned[len + 1];
    int j = 0;
    
    // 清理非字母数字字符并转小写
    for (int i = 0; i < len; i++) {
        if (isalnum(s[i])) {
            cleaned[j++] = tolower(s[i]);
        }
    }
    cleaned[j] = '\0';
    
    // 判断是否回文
    int left = 0;
    int right = j - 1;
    while (left < right) {
        if (cleaned[left] != cleaned[right]) {
            return false;
        }
        left++;
        right--;
    }
    
    return true;
}",1000,256,简单,字符串

合并有序数组,"请实现一个函数，将两个已排序的数组合并为一个新的已排序数组。

输入：两个已排序的整数数组
输出：一个新的已排序数组，包含所有输入数组中的元素",merge,int[]|int[]|int|int,int[],"示例1:
输入: [1,3,5] [2,4,6] 3 3
输出: [1,2,3,4,5,6]

示例2:
输入: [1,2,3] [4,5] 3 2
输出: [1,2,3,4,5]

示例3:
输入: [] [1] 0 1
输出: [1]","class Solution {
    public int[] merge(int[] nums1, int[] nums2, int m, int n) {
        // 请在此实现你的代码
        return new int[0];
    }
}","def merge(nums1, nums2, m, n):
    # 请在此实现你的代码
    pass","vector<int> merge(vector<int>& nums1, vector<int>& nums2, int m, int n) {
    // 请在此实现你的代码
    return vector<int>();
}","void merge(int* nums1, int m, int* nums2, int n, int* result) {
    // 请在此实现你的代码
}","class Solution {
    public int[] merge(int[] nums1, int[] nums2, int m, int n) {
        int[] result = new int[m + n];
        int i = 0, j = 0, k = 0;
        
        while (i < m && j < n) {
            if (nums1[i] <= nums2[j]) {
                result[k++] = nums1[i++];
            } else {
                result[k++] = nums2[j++];
            }
        }
        
        while (i < m) {
            result[k++] = nums1[i++];
        }
        
        while (j < n) {
            result[k++] = nums2[j++];
        }
        
        return result;
    }
}","def merge(nums1, nums2, m, n):
    result = []
    i = j = 0
    
    while i < m and j < n:
        if nums1[i] <= nums2[j]:
            result.append(nums1[i])
            i += 1
        else:
            result.append(nums2[j])
            j += 1
    
    while i < m:
        result.append(nums1[i])
        i += 1
    
    while j < n:
        result.append(nums2[j])
        j += 1
    
    return result","vector<int> merge(vector<int>& nums1, vector<int>& nums2, int m, int n) {
    vector<int> result(m + n);
    int i = 0, j = 0, k = 0;
    
    while (i < m && j < n) {
        if (nums1[i] <= nums2[j]) {
            result[k++] = nums1[i++];
        } else {
            result[k++] = nums2[j++];
        }
    }
    
    while (i < m) {
        result[k++] = nums1[i++];
    }
    
    while (j < n) {
        result[k++] = nums2[j++];
    }
    
    return result;
}","void merge(int* nums1, int m, int* nums2, int n, int* result) {
    int i = 0, j = 0, k = 0;
    
    while (i < m && j < n) {
        if (nums1[i] <= nums2[j]) {
            result[k++] = nums1[i++];
        } else {
            result[k++] = nums2[j++];
        }
    }
    
    while (i < m) {
        result[k++] = nums1[i++];
    }
    
    while (j < n) {
        result[k++] = nums2[j++];
    }
}",1000,256,中等,数组

二叉树层序遍历,"请实现一个函数，对二叉树进行层序遍历（从上到下、从左到右）。

层序遍历是指按照树的层级结构，从根节点开始，逐层从左到右访问所有节点。

输入：一个二叉树的根节点
输出：一个二维数组，其中每个子数组包含二叉树中同一层的所有节点值",levelOrder,TreeNode*,int[][],"示例1:
输入: [3,9,20,null,null,15,7]
    3
   / \
  9  20
    /  \
   15   7
输出: [[3],[9,20],[15,7]]

示例2:
输入: [1]
输出: [[1]]

示例3:
输入: []
输出: []","/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        // 请在此实现你的代码
        return new ArrayList<>();
    }
}","# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        # 请在此实现你的代码
        pass","/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        // 请在此实现你的代码
        return vector<vector<int>>();
    }
};","/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {
    // 请在此实现你的代码
    *returnSize = 0;
    return NULL;
}","/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> currentLevel = new ArrayList<>();
            
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                currentLevel.add(node.val);
                
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            
            result.add(currentLevel);
        }
        
        return result;
    }
}","# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        
        result = []
        queue = [root]
        
        while queue:
            level_size = len(queue)
            current_level = []
            
            for _ in range(level_size):
                node = queue.pop(0)
                current_level.append(node.val)
                
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            result.append(current_level)
        
        return result","/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if (!root) {
            return result;
        }
        
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            int levelSize = q.size();
            vector<int> currentLevel;
            
            for (int i = 0; i < levelSize; i++) {
                TreeNode* node = q.front();
                q.pop();
                currentLevel.push_back(node->val);
                
                if (node->left) {
                    q.push(node->left);
                }
                if (node->right) {
                    q.push(node->right);
                }
            }
            
            result.push_back(currentLevel);
        }
        
        return result;
    }
};","/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {
    if (root == NULL) {
        *returnSize = 0;
        return NULL;
    }
    
    // 初始化队列
    struct TreeNode** queue = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * 10000);
    int front = 0, rear = 0;
    queue[rear++] = root;
    
    // 结果数组
    int** result = (int**)malloc(sizeof(int*) * 2000);
    *returnColumnSizes = (int*)malloc(sizeof(int) * 2000);
    *returnSize = 0;
    
    while (front < rear) {
        int levelSize = rear - front;
        result[*returnSize] = (int*)malloc(sizeof(int) * levelSize);
        (*returnColumnSizes)[*returnSize] = levelSize;
        
        for (int i = 0; i < levelSize; i++) {
            struct TreeNode* node = queue[front++];
            result[*returnSize][i] = node->val;
            
            if (node->left) {
                queue[rear++] = node->left;
            }
            if (node->right) {
                queue[rear++] = node->right;
            }
        }
        
        (*returnSize)++;
    }
    
    free(queue);
    return result;
}",1000,256,中等,树

LRU缓存,"请实现一个LRU（最近最少使用）缓存机制，支持get和put操作。

get(key)：如果缓存中存在key，则返回对应的值，否则返回-1
put(key, value)：如果缓存中不存在key，则插入该key-value对；如果缓存中已存在key，则更新其对应的value。当缓存达到容量上限时，则应该删除最久未使用的项（LRU策略）。

注意：操作应该具有O(1)的时间复杂度",LRUCache,int,class,"示例:
LRUCache cache = new LRUCache(2);  // 容量为2
cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回1
cache.put(3, 3);    // 删除key 2
cache.get(2);       // 返回-1（未找到）
cache.put(4, 4);    // 删除key 1
cache.get(1);       // 返回-1（未找到）
cache.get(3);       // 返回3
cache.get(4);       // 返回4","class LRUCache {
    // 请在此实现你的代码
    
    public LRUCache(int capacity) {
        // 请在此实现你的代码
    }
    
    public int get(int key) {
        // 请在此实现你的代码
        return 0;
    }
    
    public void put(int key, int value) {
        // 请在此实现你的代码
    }
}","class LRUCache:
    def __init__(self, capacity: int):
        # 请在此实现你的代码
        pass
        
    def get(self, key: int) -> int:
        # 请在此实现你的代码
        pass
    
    def put(self, key: int, value: int) -> None:
        # 请在此实现你的代码
        pass","class LRUCache {
public:
    LRUCache(int capacity) {
        // 请在此实现你的代码
    }
    
    int get(int key) {
        // 请在此实现你的代码
        return 0;
    }
    
    void put(int key, int value) {
        // 请在此实现你的代码
    }
};","typedef struct {
    // 请在此实现你的代码
} LRUCache;

LRUCache* lRUCacheCreate(int capacity) {
    // 请在此实现你的代码
    return NULL;
}

int lRUCacheGet(LRUCache* obj, int key) {
    // 请在此实现你的代码
    return 0;
}

void lRUCachePut(LRUCache* obj, int key, int value) {
    // 请在此实现你的代码
}

void lRUCacheFree(LRUCache* obj) {
    // 请在此实现你的代码
}","class LRUCache {
    private class DLinkedNode {
        int key;
        int value;
        DLinkedNode prev;
        DLinkedNode next;
        
        public DLinkedNode() {}
        
        public DLinkedNode(int key, int value) {
            this.key = key;
            this.value = value;
        }
    }
    
    private int size;
    private int capacity;
    private DLinkedNode head, tail;
    private Map<Integer, DLinkedNode> cache;
    
    public LRUCache(int capacity) {
        this.size = 0;
        this.capacity = capacity;
        
        // 使用伪头部和伪尾部节点
        head = new DLinkedNode();
        tail = new DLinkedNode();
        head.next = tail;
        tail.prev = head;
        
        cache = new HashMap<>();
    }
    
    public int get(int key) {
        DLinkedNode node = cache.get(key);
        if (node == null) {
            return -1;
        }
        
        // 如果key存在，移动到头部
        moveToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        DLinkedNode node = cache.get(key);
        
        if (node == null) {
            // 如果key不存在，创建新节点
            DLinkedNode newNode = new DLinkedNode(key, value);
            
            // 添加到哈希表
            cache.put(key, newNode);
            
            // 添加到链表头部
            addToHead(newNode);
            size++;
            
            if (size > capacity) {
                // 如果超出容量，删除尾部节点
                DLinkedNode removed = removeTail();
                // 从哈希表中删除
                cache.remove(removed.key);
                size--;
            }
        } else {
            // 如果key存在，更新值并移动到头部
            node.value = value;
            moveToHead(node);
        }
    }
    
    private void addToHead(DLinkedNode node) {
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }
    
    private void removeNode(DLinkedNode node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
    
    private void moveToHead(DLinkedNode node) {
        removeNode(node);
        addToHead(node);
    }
    
    private DLinkedNode removeTail() {
        DLinkedNode removed = tail.prev;
        removeNode(removed);
        return removed;
    }
}","class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = {}  # 哈希表
        self.size = 0
        self.head, self.tail = {}, {}  # 使用字典实现双向链表节点
        self.head['next'] = self.tail
        self.tail['prev'] = self.head
        
    def _add_node(self, node):
        """添加新节点到双向链表头部"""
        node['prev'] = self.head
        node['next'] = self.head['next']
        self.head['next']['prev'] = node
        self.head['next'] = node
        
    def _remove_node(self, node):
        """从双向链表中删除节点"""
        prev = node['prev']
        new_next = node['next']
        prev['next'] = new_next
        new_next['prev'] = prev
        
    def _move_to_head(self, node):
        """将节点移动到头部"""
        self._remove_node(node)
        self._add_node(node)
        
    def _pop_tail(self):
        """删除尾部节点并返回"""
        res = self.tail['prev']
        self._remove_node(res)
        return res
    
    def get(self, key: int) -> int:
        node = self.cache.get(key, None)
        if not node:
            return -1
        
        # 如果key存在，将节点移到头部
        self._move_to_head(node)
        return node['value']
    
    def put(self, key: int, value: int) -> None:
        node = self.cache.get(key)
        
        if not node:
            # 如果key不存在，创建新节点
            new_node = {
                'key': key, 
                'value': value
            }
            self.cache[key] = new_node
            self._add_node(new_node)
            self.size += 1
            
            if self.size > self.capacity:
                # 如果超出容量，删除尾部节点
                tail = self._pop_tail()
                del self.cache[tail['key']]
                self.size -= 1
        else:
            # 如果key存在，更新值并移到头部
            node['value'] = value
            self._move_to_head(node)","class LRUCache {
private:
    struct DLinkedNode {
        int key;
        int value;
        DLinkedNode* prev;
        DLinkedNode* next;
        DLinkedNode() : key(0), value(0), prev(nullptr), next(nullptr) {}
        DLinkedNode(int k, int v) : key(k), value(v), prev(nullptr), next(nullptr) {}
    };
    
    int size;
    int capacity;
    DLinkedNode* head;
    DLinkedNode* tail;
    unordered_map<int, DLinkedNode*> cache;
    
    void addToHead(DLinkedNode* node) {
        node->prev = head;
        node->next = head->next;
        head->next->prev = node;
        head->next = node;
    }
    
    void removeNode(DLinkedNode* node) {
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }
    
    void moveToHead(DLinkedNode* node) {
        removeNode(node);
        addToHead(node);
    }
    
    DLinkedNode* removeTail() {
        DLinkedNode* removed = tail->prev;
        removeNode(removed);
        return removed;
    }
    
public:
    LRUCache(int capacity) {
        this->size = 0;
        this->capacity = capacity;
        
        // 使用伪头部和伪尾部节点
        head = new DLinkedNode();
        tail = new DLinkedNode();
        head->next = tail;
        tail->prev = head;
    }
    
    int get(int key) {
        if (cache.count(key) == 0) {
            return -1;
        }
        
        // 如果key存在，移动到头部
        DLinkedNode* node = cache[key];
        moveToHead(node);
        return node->value;
    }
    
    void put(int key, int value) {
        if (cache.count(key) > 0) {
            // 如果key存在，更新值并移动到头部
            DLinkedNode* node = cache[key];
            node->value = value;
            moveToHead(node);
        } else {
            // 如果key不存在，创建新节点
            DLinkedNode* node = new DLinkedNode(key, value);
            
            // 添加到哈希表
            cache[key] = node;
            
            // 添加到链表头部
            addToHead(node);
            size++;
            
            if (size > capacity) {
                // 如果超出容量，删除尾部节点
                DLinkedNode* removed = removeTail();
                // 从哈希表中删除
                cache.erase(removed->key);
                delete removed;
                size--;
            }
        }
    }
    
    ~LRUCache() {
        DLinkedNode* curr = head;
        while (curr != nullptr) {
            DLinkedNode* next = curr->next;
            delete curr;
            curr = next;
        }
    }
};","typedef struct DLinkedNode {
    int key;
    int value;
    struct DLinkedNode* prev;
    struct DLinkedNode* next;
} DLinkedNode;

typedef struct {
    int size;
    int capacity;
    DLinkedNode* head;
    DLinkedNode* tail;
    DLinkedNode** hashTable;
} LRUCache;

DLinkedNode* createNode(int key, int value) {
    DLinkedNode* node = (DLinkedNode*)malloc(sizeof(DLinkedNode));
    node->key = key;
    node->value = value;
    node->prev = NULL;
    node->next = NULL;
    return node;
}

LRUCache* lRUCacheCreate(int capacity) {
    LRUCache* obj = (LRUCache*)malloc(sizeof(LRUCache));
    obj->size = 0;
    obj->capacity = capacity;
    
    // 创建哈希表
    obj->hashTable = (DLinkedNode**)calloc(10001, sizeof(DLinkedNode*));
    
    // 创建伪头部和伪尾部节点
    obj->head = createNode(0, 0);
    obj->tail = createNode(0, 0);
    obj->head->next = obj->tail;
    obj->tail->prev = obj->head;
    
    return obj;
}

void moveToHead(LRUCache* obj, DLinkedNode* node) {
    // 先从当前位置删除
    node->prev->next = node->next;
    node->next->prev = node->prev;
    
    // 插入到头部
    node->prev = obj->head;
    node->next = obj->head->next;
    obj->head->next->prev = node;
    obj->head->next = node;
}

int lRUCacheGet(LRUCache* obj, int key) {
    if (obj->hashTable[key] == NULL) {
        return -1;
    }
    
    DLinkedNode* node = obj->hashTable[key];
    moveToHead(obj, node);
    return node->value;
}

void removeTail(LRUCache* obj) {
    DLinkedNode* node = obj->tail->prev;
    
    // 从链表中删除
    node->prev->next = obj->tail;
    obj->tail->prev = node->prev;
    
    // 从哈希表中删除
    obj->hashTable[node->key] = NULL;
    
    free(node);
}

void lRUCachePut(LRUCache* obj, int key, int value) {
    if (obj->hashTable[key] != NULL) {
        // 如果key已存在，更新值并移动到头部
        DLinkedNode* node = obj->hashTable[key];
        node->value = value;
        moveToHead(obj, node);
    } else {
        // 如果key不存在，创建新节点
        DLinkedNode* node = createNode(key, value);
        
        // 添加到哈希表
        obj->hashTable[key] = node;
        
        // 添加到链表头部
        node->prev = obj->head;
        node->next = obj->head->next;
        obj->head->next->prev = node;
        obj->head->next = node;
        
        obj->size++;
        
        // 如果超出容量，删除尾部节点
        if (obj->size > obj->capacity) {
            removeTail(obj);
            obj->size--;
        }
    }
}

void lRUCacheFree(LRUCache* obj) {
    DLinkedNode* curr = obj->head;
    while (curr != NULL) {
        DLinkedNode* temp = curr;
        curr = curr->next;
        free(temp);
    }
    
    free(obj->hashTable);
    free(obj);
}",2000,512,困难,设计 